//
//  ChatsViewController.swift
//  Kiwari-ios-test
//
//  Created by daniel on 08/05/20.
//  Copyright (c) 2020 Daniel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GrowingTextView

protocol ChatsDisplayLogic: class
{
    func displayChat(viewModel: Chats.ChatModel.ViewModel)
    func displayListenerChat(viewModel: Chats.ListenChat.ViewModel)
    func displayAddChatResponse(viewModel: Chats.AddChat.ViewModel)
}

class ChatsViewController: UIViewController
{
    var interactor: ChatsBusinessLogic?
    var router: (NSObjectProtocol & ChatsRoutingLogic & ChatsDataPassing)?
    
    
    @IBOutlet weak var navBar: NavigationBarChatView!
    @IBOutlet weak var chatTable: UITableView!
    @IBOutlet weak var message: GrowingTextView!
    @IBOutlet weak var sendButton: UIButton!
    @IBOutlet weak var bottomMessage: NSLayoutConstraint!
    @IBOutlet weak var messageView: UIView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ChatsInteractor()
        let presenter = ChatsPresenter()
        let router = ChatsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        self.navigationController?.navigationBar.isHidden = true
    }
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        setupView()
        fetchChats()
        
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        NotificationCenter.default.removeObserver(self)
    }
    
    
    func setupView() {
        chatTable.register(UINib(nibName: "ChatTableViewCell", bundle: nil), forCellReuseIdentifier: "ChatTableViewCell")
        chatTable.rowHeight = UITableView.automaticDimension
        chatTable.estimatedRowHeight = 10.0
        
        if let user = UserStorage.getUser() {
            
            navBar.setupView(user: user)
        }
        
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHideNotification), name: UIResponder.keyboardWillHideNotification, object: nil)
        
        let thickness: CGFloat = 0.8
        let topBorder = CALayer()
        topBorder.frame = CGRect(x: 0.0, y: 0.0, width: self.view.frame.size.width, height: thickness)
        topBorder.backgroundColor = UIColor.lightGray.cgColor
        messageView.layer.addSublayer(topBorder)
        
        let tap: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(keyboardWillHideNotification))
        
        view.addGestureRecognizer(tap)
    }
    
    // MARK: Do something
    
    func fetchChats()
    {
        let request = Chats.ChatModel.Request()
        interactor?.fetchChat(request: request)
    }
    
    // MARK: Handling Keyboard
    
    @objc private func keyboardWillShow(notification: NSNotification) {
        if let keyboardSize = (notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue {
            if self.bottomMessage.constant == 0 {
                UIView.animate(withDuration: 2) {
                    self.bottomMessage.constant += keyboardSize.height
                    self.view.layoutIfNeeded()
                }
                
            }
            if chatTable.contentOffset.y >= (chatTable.contentSize.height - chatTable.frame.size.height - keyboardSize.height) {
                scrollToBottom()
            }
            
        }
    }
    
    @objc private func keyboardWillHideNotification(notification: NSNotification) {
        self.keyboardWillHide()
    }
    
    func keyboardWillHide() {
        view.endEditing(true)
        if self.bottomMessage.constant != 0 {
            UIView.animate(withDuration: 2) {
                self.bottomMessage.constant = 0
                self.view.layoutIfNeeded()
            }
        }
    }
    
    @IBAction func sendClicked(_ sender: Any) {
        guard let user = UserStorage.getUser() else {return}
        let message = self.message.text
        if message?.count ?? 0 > 0 {
            let chat = Chat(name: user.name, email: user.email, avatar: user.avatar, time: Date(), message: message ?? ("") )
            interactor?.addChat(request: Chats.AddChat.Request(chat: chat))
            self.message.text = ""
            keyboardWillHide()
        }
    }
    
    
    
    
}


extension ChatsViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        router?.dataStore?.chat?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = self.chatTable.dequeueReusableCell(withIdentifier: "ChatTableViewCell") as! ChatTableViewCell
        
        guard let data = router?.dataStore?.chat else {return cell}
        cell.setup(chat: data[indexPath.row])
        return cell
        
    }
    
    func scrollToBottom() {
        guard let chatCounter = router?.dataStore?.chat?.count else {return}
        if chatCounter > 0 {
            chatTable.scrollToRow(at: IndexPath(row: chatCounter - 1, section: 0), at: .bottom, animated: false)
        }
        
    }
}

extension ChatsViewController: UITextViewDelegate {
    func textViewDidChange(_ textView: UITextView) {
        sendButton.isEnabled = textView.text.count > 0
    }
}

extension ChatsViewController: ChatsDisplayLogic {
    
    // MARK: Display Chat
    
    func displayChat(viewModel: Chats.ChatModel.ViewModel) {
        chatTable.reloadData()
        
        let request = Chats.ListenChat.Request()
        scrollToBottom()
        interactor?.listenChat(request: request)
    }
    
    func displayListenerChat(viewModel: Chats.ListenChat.ViewModel) {
        chatTable.beginUpdates()
        chatTable.insertRows(at: [IndexPath(row: (router?.dataStore?.chat?.count ?? 1) - 1, section: 0)], with: .automatic)
        chatTable.endUpdates()
        scrollToBottom()
    }
    
    func displayAddChatResponse(viewModel: Chats.AddChat.ViewModel) {
        switch viewModel.data {
        case .failure(let err as ErrorHandler): self.popupAlert(title: err.domain, message: err.description, actionTitles: ["OK"], actions: [nil])
        default:
            print("success")
        }
    }
}
